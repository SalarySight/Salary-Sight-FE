{"ast":null,"code":"var _jsxFileName = \"/Users/darlaevans/turing/mod4/salary-sight/src/Components/Form/Form.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { bool, node } from \"prop-types\";\nimport { useTransition, animated } from \"react-spring\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Inner = styled.div`\n  &:before,\n  &:after {\n    content: \"\";\n    display: table;\n  }\n`;\n_c = Inner;\nconst visibleStyle = {\n  height: \"auto\",\n  opacity: 1,\n  overflow: \"visible\"\n};\nconst hiddenStyle = {\n  opacity: 0,\n  height: 0,\n  overflow: \"hidden\"\n};\n\nfunction getElementHeight(ref) {\n  return ref.current ? ref.current.getBoundingClientRect().height : 0;\n}\n/** The children of this component will slide down on mount and will slide up on unmount */\n\n\nconst SlideToggleContent = ({\n  isVisible,\n  children,\n  forceSlideIn\n}) => {\n  _s();\n\n  const isVisibleOnMount = useRef(isVisible && !forceSlideIn);\n  const containerRef = useRef(null);\n  const innerRef = useRef(null);\n  const transitions = useTransition(isVisible, {\n    enter: () => async (next, cancel) => {\n      const height = getElementHeight(innerRef);\n      cancel();\n      await next({\n        height,\n        opacity: 1,\n        overflow: \"hidden\"\n      });\n      await next(visibleStyle);\n    },\n    leave: () => async (next, cancel) => {\n      const height = getElementHeight(containerRef);\n      cancel();\n      await next({\n        height,\n        overflow: \"hidden\"\n      });\n      await next(hiddenStyle);\n      isVisibleOnMount.current = false;\n    },\n    from: isVisibleOnMount.current ? visibleStyle : hiddenStyle,\n    unique: true\n  });\n  return transitions.map(({\n    item: show,\n    props: springProps,\n    key\n  }) => {\n    if (show) {\n      return /*#__PURE__*/_jsxDEV(animated.div, {\n        ref: containerRef,\n        style: springProps,\n        children: /*#__PURE__*/_jsxDEV(Inner, {\n          ref: innerRef,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this);\n    }\n\n    return null;\n  });\n};\n\n_s(SlideToggleContent, \"KStMqJtX0ZI/dftdgTOz3ApbcxE=\", false, function () {\n  return [useTransition];\n});\n\n_c2 = SlideToggleContent;\nSlideToggleContent.defaultProps = {\n  forceSlideIn: false\n};\nSlideToggleContent.propTypes = {\n  /** Should the component mount it's childeren and slide down */\n  isVisible: bool.isRequired,\n\n  /** Makes sure the component always slides in on mount. Otherwise it will be immediately visible if isVisible is true on mount */\n  forceSlideIn: bool,\n\n  /** The slidable content elements */\n  children: node.isRequired\n};\n\nfunction Form() {\n  _s2();\n\n  const [isVisible, setIsVisible] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Slide Toggle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => setIsVisible(!isVisible),\n      children: [isVisible ? \"Close\" : \"Open\", \" content\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SlideToggleContent, {\n      isVisible: isVisible,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Success!! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This content will be mounted and unmounted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(Form, \"QjDZesRvLCmcrZLxgN677nXnVLA=\");\n\n_c3 = Form;\nexport default Form;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Inner\");\n$RefreshReg$(_c2, \"SlideToggleContent\");\n$RefreshReg$(_c3, \"Form\");","map":{"version":3,"sources":["/Users/darlaevans/turing/mod4/salary-sight/src/Components/Form/Form.js"],"names":["React","useRef","useState","bool","node","useTransition","animated","styled","Inner","div","visibleStyle","height","opacity","overflow","hiddenStyle","getElementHeight","ref","current","getBoundingClientRect","SlideToggleContent","isVisible","children","forceSlideIn","isVisibleOnMount","containerRef","innerRef","transitions","enter","next","cancel","leave","from","unique","map","item","show","props","springProps","key","defaultProps","propTypes","isRequired","Form","setIsVisible"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { bool, node } from \"prop-types\";\nimport { useTransition, animated } from \"react-spring\";\nimport styled from \"styled-components\";\n\nconst Inner = styled.div`\n  &:before,\n  &:after {\n    content: \"\";\n    display: table;\n  }\n`;\n\nconst visibleStyle = { height: \"auto\", opacity: 1, overflow: \"visible\" };\nconst hiddenStyle = { opacity: 0, height: 0, overflow: \"hidden\" };\n\nfunction getElementHeight(ref) {\n  return ref.current ? ref.current.getBoundingClientRect().height : 0;\n}\n\n/** The children of this component will slide down on mount and will slide up on unmount */\nconst SlideToggleContent = ({ isVisible, children, forceSlideIn }) => {\n  const isVisibleOnMount = useRef(isVisible && !forceSlideIn);\n  const containerRef = useRef(null);\n  const innerRef = useRef(null);\n\n  const transitions = useTransition(isVisible, {\n    enter: () => async (next, cancel) => {\n      const height = getElementHeight(innerRef);\n\n      cancel();\n\n      await next({ height, opacity: 1, overflow: \"hidden\" });\n      await next(visibleStyle);\n    },\n    leave: () => async (next, cancel) => {\n      const height = getElementHeight(containerRef);\n\n      cancel();\n\n      await next({ height, overflow: \"hidden\" });\n      await next(hiddenStyle);\n\n      isVisibleOnMount.current = false;\n    },\n    from: isVisibleOnMount.current ? visibleStyle : hiddenStyle,\n    unique: true\n  });\n\n  return transitions.map(({ item: show, props: springProps, key }) => {\n    if (show) {\n      return (\n        <animated.div ref={containerRef} key={key} style={springProps}>\n          <Inner ref={innerRef}>{children}</Inner>\n        </animated.div>\n      );\n    }\n\n    return null;\n  });\n};\n\nSlideToggleContent.defaultProps = {\n  forceSlideIn: false\n};\n\nSlideToggleContent.propTypes = {\n  /** Should the component mount it's childeren and slide down */\n  isVisible: bool.isRequired,\n  /** Makes sure the component always slides in on mount. Otherwise it will be immediately visible if isVisible is true on mount */\n  forceSlideIn: bool,\n  /** The slidable content elements */\n  children: node.isRequired\n};\n\nfunction Form() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    <>\n      <h1>Slide Toggle</h1>\n      <button type=\"button\" onClick={() => setIsVisible(!isVisible)}>\n        {isVisible ? \"Close\" : \"Open\"} content\n      </button>\n      <SlideToggleContent isVisible={isVisible}>\n        <>\n          <h2>Success!! 🎉</h2>\n          <p>This content will be mounted and unmounted</p>\n        </>\n      </SlideToggleContent>\n    </>\n  );\n}\nexport default Form\n"]},"metadata":{},"sourceType":"module"}