{"ast":null,"code":"import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n    setPrototypeOf = _a === void 0 ? function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n} : _a;\n\nvar InvariantError =\n/** @class */\nfunction (_super) {\n  __extends(InvariantError, _super);\n\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n\n  return InvariantError;\n}(Error);\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod(name) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      var method = console[name] || console.log;\n      return method.apply(console, arguments);\n    }\n  };\n}\n\n(function (invariant) {\n  invariant.debug = wrapConsoleMethod(\"debug\");\n  invariant.log = wrapConsoleMethod(\"log\");\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\n\nfunction setVerbosity(level) {\n  var old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nvar invariant$1 = invariant;\nexport { InvariantError, invariant$1 as default, invariant, setVerbosity };","map":{"version":3,"sources":["/Users/darlaevans/turing/mod4/salary-sight/node_modules/ts-invariant/lib/invariant.esm.js"],"names":["__extends","genericMessage","_a","Object","setPrototypeOf","obj","proto","__proto__","InvariantError","_super","message","_this","call","framesToPop","name","prototype","Error","invariant","condition","verbosityLevels","verbosityLevel","indexOf","wrapConsoleMethod","method","console","log","apply","arguments","debug","warn","error","setVerbosity","level","old","Math","max","invariant$1","default"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,IAAIC,cAAc,GAAG,qBAArB;AACA,IAAIC,EAAE,GAAGC,MAAM,CAACC,cAAhB;AAAA,IAAgCA,cAAc,GAAGF,EAAE,KAAK,KAAK,CAAZ,GAAgB,UAAUG,GAAV,EAAeC,KAAf,EAAsB;AACnFD,EAAAA,GAAG,CAACE,SAAJ,GAAgBD,KAAhB;AACA,SAAOD,GAAP;AACH,CAHgD,GAG7CH,EAHJ;;AAIA,IAAIM,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAClDT,EAAAA,SAAS,CAACQ,cAAD,EAAiBC,MAAjB,CAAT;;AACA,WAASD,cAAT,CAAwBE,OAAxB,EAAiC;AAC7B,QAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAGT,cAAV;AAA2B;;AACrD,QAAIU,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkB,OAAOF,OAAP,KAAmB,QAAnB,GACxBT,cAAc,GAAG,IAAjB,GAAwBS,OAAxB,GAAkC,4DADV,GAExBA,OAFM,KAEM,IAFlB;;AAGAC,IAAAA,KAAK,CAACE,WAAN,GAAoB,CAApB;AACAF,IAAAA,KAAK,CAACG,IAAN,GAAab,cAAb;AACAG,IAAAA,cAAc,CAACO,KAAD,EAAQH,cAAc,CAACO,SAAvB,CAAd;AACA,WAAOJ,KAAP;AACH;;AACD,SAAOH,cAAP;AACH,CAbmC,CAalCQ,KAbkC,CAApC;;AAcA,SAASC,SAAT,CAAmBC,SAAnB,EAA8BR,OAA9B,EAAuC;AACnC,MAAI,CAACQ,SAAL,EAAgB;AACZ,UAAM,IAAIV,cAAJ,CAAmBE,OAAnB,CAAN;AACH;AACJ;;AACD,IAAIS,eAAe,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,MAAjB,EAAyB,OAAzB,EAAkC,QAAlC,CAAtB;AACA,IAAIC,cAAc,GAAGD,eAAe,CAACE,OAAhB,CAAwB,KAAxB,CAArB;;AACA,SAASC,iBAAT,CAA2BR,IAA3B,EAAiC;AAC7B,SAAO,YAAY;AACf,QAAIK,eAAe,CAACE,OAAhB,CAAwBP,IAAxB,KAAiCM,cAArC,EAAqD;AACjD;AACA;AACA,UAAIG,MAAM,GAAGC,OAAO,CAACV,IAAD,CAAP,IAAiBU,OAAO,CAACC,GAAtC;AACA,aAAOF,MAAM,CAACG,KAAP,CAAaF,OAAb,EAAsBG,SAAtB,CAAP;AACH;AACJ,GAPD;AAQH;;AACD,CAAC,UAAUV,SAAV,EAAqB;AAClBA,EAAAA,SAAS,CAACW,KAAV,GAAkBN,iBAAiB,CAAC,OAAD,CAAnC;AACAL,EAAAA,SAAS,CAACQ,GAAV,GAAgBH,iBAAiB,CAAC,KAAD,CAAjC;AACAL,EAAAA,SAAS,CAACY,IAAV,GAAiBP,iBAAiB,CAAC,MAAD,CAAlC;AACAL,EAAAA,SAAS,CAACa,KAAV,GAAkBR,iBAAiB,CAAC,OAAD,CAAnC;AACH,CALD,EAKGL,SAAS,KAAKA,SAAS,GAAG,EAAjB,CALZ;;AAMA,SAASc,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,MAAIC,GAAG,GAAGd,eAAe,CAACC,cAAD,CAAzB;AACAA,EAAAA,cAAc,GAAGc,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYhB,eAAe,CAACE,OAAhB,CAAwBW,KAAxB,CAAZ,CAAjB;AACA,SAAOC,GAAP;AACH;;AACD,IAAIG,WAAW,GAAGnB,SAAlB;AAEA,SAAST,cAAT,EAAyB4B,WAAW,IAAIC,OAAxC,EAAiDpB,SAAjD,EAA4Dc,YAA5D","sourcesContent":["import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\r\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\r\nfunction wrapConsoleMethod(name) {\r\n    return function () {\r\n        if (verbosityLevels.indexOf(name) >= verbosityLevel) {\r\n            // Default to console.log if this host environment happens not to provide\r\n            // all the console.* methods we need.\r\n            var method = console[name] || console.log;\r\n            return method.apply(console, arguments);\r\n        }\r\n    };\r\n}\r\n(function (invariant) {\r\n    invariant.debug = wrapConsoleMethod(\"debug\");\r\n    invariant.log = wrapConsoleMethod(\"log\");\r\n    invariant.warn = wrapConsoleMethod(\"warn\");\r\n    invariant.error = wrapConsoleMethod(\"error\");\r\n})(invariant || (invariant = {}));\r\nfunction setVerbosity(level) {\r\n    var old = verbosityLevels[verbosityLevel];\r\n    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\r\n    return old;\r\n}\r\nvar invariant$1 = invariant;\n\nexport { InvariantError, invariant$1 as default, invariant, setVerbosity };\n//# sourceMappingURL=invariant.esm.js.map\n"]},"metadata":{},"sourceType":"module"}